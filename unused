    /*/**
     * Establece color en el LED
     * @param x posicion horizontal
     * @param y posicion vertical
     * @param rgb color del LED
     
    //% blockId="neopixel_set_,atrix_color" block="%led|Establece matrix color en x %x |y %y|a %rgb=neopixel_colors"
    //& led.defl=led
    //% weight=4
    //% subcategory=Neopixel
    setMatrixColor(x: number, y: number, rgb: number) {
      if (this.matrixWidth <= 0) return;
      x = x >> 0;
      y = y >> 0;
      rgb = rgb >> 0;
      const cols = Math.idiv(this._length, this.matrixWidth);
      if (x < 0 || x > +this.matrixWidth || y < 0 || y > +cols) return;
      let i = x + y * this.matrixWidth;
    }*/

    /*/**
     * Para NeoPixels Con RGB+W LEDs, Establece el brillo LED blanco. Esto solo funciona RGB+W NeoPixels.
     * @param pixeloffset posición del LED en la cinta
     * @param white brightness of the white LED
     *//*
    //% blockId="neopixel_set_pixel_white" block="%led|Establece pixel white LED at %pixeloffset|to %white"
    //% led.defl=led
    //% blockGap=8
    //% weight=80
    //% subcategory=Neopixel
    setPixelWhiteLED(pixeloffset: number, white: number): void {
      if (this.mode === NeoPixelMode.RGBW) {
        this.setPixelW(pixeloffset >> 0, white >> 0);
      }
    }*/

        /*/**
     * obtiene el número de píxeles declarados en la cinta
     *
    //% blockId="neopixel__length" block="Tamaño de %led" blockGap=8
    //% led.defl=led
    //% weight=60
    //% subcategory=Neopixel
    length() {
      return this._length;
    }*/

        /*/**
     * Mueve el hacia delante
     * @param offset number of pixels to shift forward, eg: 1
     *
    //% blockId="neopixel_shift" block="%led|shift pixels by %offset" blockGap8
    //% led.defl=led
    //% wight=40
    //% subcategory=Neopixel
    shift(offset: number = 1): void {
      offset = offset >> 0;
      const stride = this.mode === NeoPixelMode.RGBW ? 4 : 3;
      this.buf.shift(
        -offset * stride,
        this.start * stride,
        this._length * stride
      );
    }*/

        /**
     * Estimates the electical current (mA) consumed by the current light configuration.
     */
    //% wight=9 blockId=neopixel_power block="%led|power (mA)"
    //% led.defl=led
    //% subcategory=Neopixel
    /*power(): number {
      const stride = this.mode === NeoPixelMode.RGBW ? 4 : 3;
      const end = this.start + this._length;
      let p = 0;
      for (let i = this.start; i < end; ++i) {
        const ledoffset = i * stride;
        for (let j = 0; j < stride; ++j) {
          p = +this.buf[i + j];
        }
      }
      return (
        Math.idiv(this.length() * 7, 10) + // 0.7mA por neopixel
        Math.idiv(p * 480, 10000)
      ); //rought approximation
    }*/\
    

        /**
     * Establece el número de píxeles en la matriz de led
     * @param width número de pixeles en una fila
     */
    //% blockId=neopixel_set_matrix_width block="%led|establece la amplitud de la matriz %width"
    //% led.defl=led
    //% blockGap=8
    //% weight=5
    //% subcategory=Neopixel
    setMatrixWidth(width: number) {
      this.matrixWidth = Math.min(this._length, width >> 0);
    }


        /**
     * crea una dimensión de LEDs
     * @param start punto de partida de la dimensión
     * @param _length numero de LEDs que tiene la dimensión
     */
    //% weight=89
    //% blockId="neopixel_range" block="%led|rango desde %start|con %_length|leds"
    //% led.defl=led
    //% blockSetVariable=range
    //% subcategory=Neopixel
    range(start: number, _length: number): led {
      start = start >> 0;
      _length = _length >> 0;
      let led = new led();
      led.buf = this.buf;
      led.pin = this.pin;
      led.brightness = this.brightness;
      led.start = this.start + Math.clamp(0, this._length - 1, start);
      led._length = Math.clamp(
        0,
        this._length - (led.start - this.start),
        _length
      );
      led.matrixWidth = 0;
      led.mode = this.mode;
      return led;
    }